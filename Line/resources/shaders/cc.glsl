
#ifdef GL_ES
precision mediump float;
#endif
uniform sampler2D inputTexture;
varying vec2 v_uv;
/*
const float srgbTable[256] = 
	{0, 0.0003035, 0.0006071, 0.0009106, 0.001214, 0.001518, 0.001821, 0.002125, 
	0.002428, 0.002732, 0.003035, 0.003347, 0.003677, 0.004025, 0.004391, 0.004777, 
	0.005182, 0.005605, 0.006049, 0.006512, 0.006995, 0.007499, 0.008023, 0.008568, 
	0.009134, 0.009721, 0.01033, 0.01096, 0.01161, 0.01229, 0.01298, 0.0137, 
	0.01444, 0.01521, 0.016, 0.01681, 0.01764, 0.0185, 0.01938, 0.02029, 
	0.02122, 0.02217, 0.02315, 0.02416, 0.02519, 0.02624, 0.02732, 0.02843, 
	0.02956, 0.03071, 0.0319, 0.0331, 0.03434, 0.0356, 0.03689, 0.0382, 
	0.03955, 0.04092, 0.04231, 0.04374, 0.04519, 0.04667, 0.04817, 0.04971, 
	0.05127, 0.05286, 0.05448, 0.05613, 0.05781, 0.05951, 0.06125, 0.06301, 
	0.0648, 0.06663, 0.06848, 0.07036, 0.07227, 0.07421, 0.07619, 0.07819,
	0.08022, 0.08228, 0.08438, 0.0865, 0.08866, 0.09084, 0.09306, 0.09531, 
	0.09759, 0.0999, 0.1022, 0.1046, 0.107, 0.1095, 0.1119, 0.1144, 
	0.117, 0.1195, 0.1221, 0.1248, 0.1274, 0.1301, 0.1329, 0.1356, 
	0.1384, 0.1413, 0.1441, 0.147, 0.15, 0.1529, 0.1559, 0.159, 
	0.162, 0.1651, 0.1683, 0.1714, 0.1746, 0.1779, 0.1812, 0.1845, 
	0.1878, 0.1912, 0.1946, 0.1981, 0.2016, 0.2051, 0.2086, 0.2122, 
	0.2159, 0.2195, 0.2232, 0.227, 0.2307, 0.2346, 0.2384, 0.2423, 
	0.2462, 0.2502, 0.2542, 0.2582, 0.2623, 0.2664, 0.2705, 0.2747, 
	0.2789, 0.2831, 0.2874, 0.2918, 0.2961, 0.3005, 0.305, 0.3095, 
	0.314, 0.3185, 0.3231, 0.3278, 0.3325, 0.3372, 0.3419, 0.3467, 
	0.3515, 0.3564, 0.3613, 0.3663, 0.3712, 0.3763, 0.3813, 0.3864, 
	0.3916, 0.3968, 0.402, 0.4072, 0.4125, 0.4179, 0.4233, 0.4287, 
	0.4342, 0.4397, 0.4452, 0.4508, 0.4564, 0.4621, 0.4678, 0.4735, 
	0.4793, 0.4851, 0.491, 0.4969, 0.5029, 0.5089, 0.5149, 0.521, 
	0.5271, 0.5333, 0.5395, 0.5457, 0.552, 0.5583, 0.5647, 0.5711, 
	0.5776, 0.5841, 0.5906, 0.5972, 0.6038, 0.6105, 0.6172, 0.624, 
	0.6308, 0.6376, 0.6445, 0.6514, 0.6584, 0.6654, 0.6724, 0.6795, 
	0.6867, 0.6939, 0.7011, 0.7084, 0.7157, 0.7231, 0.7305, 0.7379, 
	0.7454, 0.7529, 0.7605, 0.7682, 0.7758, 0.7835, 0.7913, 0.7991, 
	0.807, 0.8148, 0.8228, 0.8308, 0.8388, 0.8469, 0.855, 0.8632, 
	0.8714, 0.8796, 0.8879, 0.8963, 0.9047, 0.9131, 0.9216, 0.9301, 
	0.9387, 0.9473, 0.956, 0.9647, 0.9734, 0.9823, 0.9911, 1};*/

vec3 colorConv(vec3 rgb)
{
	const mat3 rgb2xyz = mat3(
		0.412453, 0.357590, 0.180423,
		0.212671, 0.715160, 0.072169,
		0.019334, 0.119193, 0.950227);
	const mat3 b = mat3(
		9.465229e-1, 2.946927e-1, -1.313419e-1,
		-1.179179e-1, 9.929960e-1, 7.371554e-3,
		9.230461e-2, -4.645794e-2, 9.946464e-1);
	const mat3 a = mat3(
		2.707439e1, -2.280783e1, -1.806681,
		-5.646736, -7.722125, 1.286503e1,
		-4.163133, -4.579428, -4.576049);
	return (a * log(b * rgb2xyz * rgb));
}


// Taken from lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl
vec3 rgb2hsv(vec3 c)
{
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

// Converts a single linear channel to srgb
float linear_to_srgb(float channel) {
	if (channel <= 0.0031308)
		return 12.92 * channel;
	else
		return (1.0 + 0.055) * pow(channel, 1.0 / 2.4) - 0.055;
}

vec3 rgb2xyz(vec3 rgb) {
	const mat3 rgb2xyz = mat3(
		0.412453, 0.357590, 0.180423,
		0.212671, 0.715160, 0.072169,
		0.019334, 0.119193, 0.950227);
	/*const mat3 rgb2xyz = mat3(
		0.412453, 0.212671, 0.019334,
		0.357590, 0.715160, 0.119193,
		0.180423, 0.072169, 0.950227);*/
	

	//rgb.r = linear_to_srgb(rgb.r);
	//rgb.g = linear_to_srgb(rgb.g);
	//rgb.b = linear_to_srgb(rgb.b);

	/*const mat3 rgb2xyz = mat3(
		0.412456439089692, 0.212672851405623, 0.019333895582329,
		0.357576077643909, 0.715152155287818, 0.119192025881303,
		0.180437483266399, 0.072174993306560, 0.950304078536368);
*/
	vec3 xyz = rgb * rgb2xyz;
	return xyz;
}

float lab_f(float t) {
	if(t > 0.008856)
		return pow(t, 1.0 / 3.0);
	return (t * 903.3 + 16.0) / 116.0;
}

vec3 xyz2lab(vec3 xyz) {
	float x = xyz.x/0.950456;
	float y = xyz.y;
	float z = xyz.z/1.088754;
	float fX = x > 0.008856 ? pow(x, 1.0 / 3.0) : (x * 903.3 + 16.0) / 116.0;
	float fY = y > 0.008856 ? pow(y, 1.0 / 3.0) : (y * 903.3 + 16.0) / 116.0;
	float fZ = z > 0.008856 ? pow(z, 1.0 / 3.0) : (z * 903.3 + 16.0) / 116.0;
	float L = y > 0.008856 ? 116.0 * pow(y, 1.0/3.0) - 16.0 : 903.3 * y;
	float a = 500.0 * (fX - fY);
	float b = 200.0 * (fY - fZ);
	return vec3(L / 100.0, (a + 128.0) / 255.0, (b + 128.0) / 255.0);
}

vec3 rgb2lab(in vec3 rgb){
    vec3 xyz = rgb2xyz(rgb);
    return xyz2lab(xyz);
}

float srgbCorr(float x)
{
	return x <= 0.040496 ? x * 1.0 / 12.92 : pow((x+0.055)*(1.0/1.055),2.4);
}

void main(void)
{
	vec3 rgb = texture2D(inputTexture, v_uv).bgr;
	rgb = vec3(srgbCorr(rgb.r), srgbCorr(rgb.g), srgbCorr(rgb.b));
	//vec3 cspace = colorConv(rgb);
	//vec3 cspace = rgb2hsv(rgb);
	//vec3 cspace = rgb2xyz(rgb);
	vec3 cspace = rgb2lab(rgb);

	gl_FragData[0] = vec4(cspace, 1.0);
}